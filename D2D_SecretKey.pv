type Key.
free edi_edj: channel.
free edj_nad: channel.
free nad_ccs: channel[private].

fun hash1 (bitstring,Key,bitstring): bitstring.
fun hash2 (Key,bitstring): bitstring.
fun hash3 (bitstring,bitstring,Key): bitstring.

free k_eci: Key[private].
free k_ecj: Key[private].
free ID_edi: bitstring[private].
free ID_edj: bitstring[private].
free CK: Key[private].
free T_seqi: bitstring[private].
free T_seqj: bitstring[private].

fun xor1 (Key,bitstring): bitstring.
reduc forall Kec:Key, Ne:bitstring; xordec1(xor1(Kec,Ne),Kec)=Ne.

fun xor2 (bitstring,bitstring): bitstring.
reduc forall h:bitstring, Tseq_New:bitstring; xordec2(xor2(h,Tseq_New),h)=Tseq_New.

fun xor3 (bitstring,Key): bitstring.
reduc forall h:bitstring, CK:Key; xordec3(xor3(h,CK),h)=CK.

event EDi_sends_params.
event EDj_sends_params.
event CCS_verifies_EDj.
event CCS_verifies_EDi.
event CCS_sends_params.
event EDj_verifies_CCS.
event EDi_verifies_CCS.

query attacker(CK).

query event(CCS_verifies_EDj)==>event(EDj_sends_params).
query event(CCS_verifies_EDi)==>event(EDi_sends_params).
query event(EDj_verifies_CCS)==>event(CCS_sends_params).
query event(EDi_verifies_CCS)==>event(CCS_sends_params).


(*START OF THE PROTOCOL*)

let EDi(k_eci:Key, T_seqi:bitstring, ID_edi:bitstring)=

    (*STEP 1: SEND MC1 TO EDj *)

    new Ne_i:bitstring;
    let Nx_i = xor1(k_eci,Ne_i) in
    let AID_EDi = hash1(ID_edi,k_eci,T_seqi) in
        event EDi_sends_params;
    out(edi_edj,(AID_EDi,Nx_i,T_seqi));

    (*STEP 7: RECEIVE MC4 FROM EDJ AND VERIFY CCS AND GET NEW SEQUENCE NUMBER AND THE SECRET KEY*)

    in(edi_edj,(e1:bitstring, e2:bitstring, RESi:bitstring));
    
     let RESi_check = hash3(e1,e2,k_eci) in
     if RESi_check=RESi then
         event EDi_verifies_CCS;
     let Tseq_Newi = xordec2(hash2(k_eci,T_seqi),e1) in
     let CK = xordec3(hash2(k_eci,Ne_i),e2).




let EDj(k_ecj:Key, T_seqj:bitstring, ID_edj:bitstring)=

    (*STEP 2: RECEIVE MC1 AND SEND MC2(WHICH ALSO CONTAINS MC1) TO NAD *)

    in(edi_edj,(AID_EDi: bitstring,Nx_i: bitstring,T_seqi: bitstring));
     new Ne_j:bitstring;
     let Nx_j = xor1(k_ecj,Ne_j) in
     let AID_EDj = hash1(ID_edj,k_ecj,T_seqj) in
         event EDj_sends_params;
      out(edj_nad,(AID_EDj,Nx_j,T_seqj,AID_EDi,Nx_i,T_seqi));

    (*STEP 6: RECEIVE MC4 FROM NAD AND VERIFY CCS AND GET NEW SEQUENCE NUMBER AND SECRET KEY FORWARD MC4(WITH E1,E2 AND RESi) TO EDi *)

    in(edj_nad,(e1: bitstring,e2: bitstring,RESi: bitstring,e3: bitstring,e4: bitstring,RESj: bitstring));

    let RESj_check = hash3(e3,e4,k_ecj) in
    if RESj_check=RESj then
        event EDj_verifies_CCS;
    let Tseq_Newj = xordec2(hash2(k_ecj,T_seqj),e3) in
    let CK = xordec3(hash2(k_ecj,Ne_j),e4) in

    out(edi_edj,(e1,e2,RESi)). 



let NAD()=


    (*STEP 3: RECEIVE MC2 AND FORWARD MC3(WHICH IS MC2 ONLY) TO CCS *)

    in(edj_nad,(AID_EDj: bitstring,Nx_j: bitstring,T_seqj: bitstring,AID_EDi: bitstring,Nx_i: bitstring,T_seqi: bitstring));
    out(nad_ccs,(AID_EDj,Nx_j,T_seqj,AID_EDi,Nx_i,T_seqi));

    (*STEP 5: RECEIVE MC4 FROM CCS AND FORWARD MC4 TO EDj*)

    in(nad_ccs,(e1: bitstring,e2: bitstring,RESi: bitstring,e3: bitstring,e4: bitstring,RESj: bitstring));
    out(edj_nad,(e1,e2,RESi,e3,e4,RESj)).




let CCS(T_seqi:bitstring, T_seqj:bitstring, ID_edi:bitstring, ID_edj:bitstring, k_eci:Key, k_ecj:Key)=

    in(nad_ccs,(AID_EDj: bitstring,Nx_j: bitstring,T_seqj: bitstring,AID_EDi: bitstring,Nx_i: bitstring,T_seqi: bitstring));

    let Ne_i_check = xordec1(Nx_i,k_eci) in
    let Ne_j_check = xordec1(Nx_j,k_ecj) in
    let AID_EDj_check = hash1(ID_edj,k_ecj,T_seqj) in
    if AID_EDj_check=AID_EDj then
        event CCS_verifies_EDj;
    let AID_EDi_check = hash1(ID_edi,k_eci,T_seqi) in
    if AID_EDi_check=AID_EDi then
        event CCS_verifies_EDi;
     new Tseq_Newi: bitstring;
     new Tseq_Newj: bitstring;
     let e1 = xor2(hash2(k_eci,T_seqi),Tseq_Newi) in
     let e2 = xor3(hash2(k_eci,Ne_i_check),CK) in
     let e3 = xor2(hash2(k_ecj,T_seqj),Tseq_Newj) in
     let e4 = xor3(hash2(k_ecj,Ne_j_check),CK) in

     let RESi = hash3(e1,e2,k_eci) in
     let RESj = hash3(e3,e4,k_ecj) in

        event CCS_sends_params;
     (*STEP4 CCS SENDS MC4 TO NAD *)
     out(nad_ccs,(e1,e2,RESi,e3,e4,RESj)).

process

    ( (!EDi(k_eci, T_seqi, ID_edi)) | (!EDj(k_ecj,T_seqj,ID_edj)) | (!NAD()) | (!CCS(T_seqi, T_seqj, ID_edi, ID_edj, k_eci, k_ecj)))
    




